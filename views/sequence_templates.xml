<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Step Sequencing Question Template -->
    <template id="quiz_sequence_question" name="Quiz Sequence Question">
        <div class="sequence-container">
            <!-- Question text -->
            <div class="question-text-container mb-4">
                <div t-field="question.question_html"/>
            </div>
            
            <!-- Instructions -->
            <div class="alert alert-info">
                <strong>Instructions:</strong> Arrange the steps in the correct order using the arrows.
            </div>
            
            <!-- Sequence list -->
            <div class="sequence-list">
                <t t-foreach="question.sequence_item_ids" t-as="step">
                    <div class="sequence-item" t-att-data-step-id="step.id">
                        <span class="step-number" t-esc="step_index + 1"/>
                        <span class="step-label" t-esc="step.label"/>
                        <div t-if="step.content" class="step-description" t-esc="step.content"/>
                        <div class="sequence-buttons">
                            <button type="button" class="btn btn-primary btn-sm move-up">↑</button>
                            <button type="button" class="btn btn-primary btn-sm move-down">↓</button>
                        </div>
                    </div>
                </t>
            </div>
            
            <!-- Hidden input for data -->
            <input type="hidden" name="sequence_data" value="[]"/>
            
            <!-- Randomize button -->
            <div class="mt-3 text-end">
                <button type="button" class="btn btn-secondary reset-sequence">Randomize</button>
            </div>
        </div>
        
        <!-- Inline script -->
        <script type="text/javascript">
            // Wait for DOM to be ready
            document.addEventListener('DOMContentLoaded', function() {
                // Helper function to update sequence
                function updateSequence(container) {
                    if (!container) return;
                    
                    // Update numbers
                    var items = container.querySelectorAll('.sequence-item');
                    for (var i = 0; i < items.length; i++) {
                        var numEl = items[i].querySelector('.step-number');
                        if (numEl) numEl.textContent = (i + 1);
                    }
                    
                    // Update data
                    var data = [];
                    for (var i = 0; i < items.length; i++) {
                        var id = items[i].dataset.stepId;
                        if (id) data.push({
                            step_id: parseInt(id),
                            position: i + 1
                        });
                    }
                    
                    var input = container.querySelector('input[name="sequence_data"]');
                    if (input) input.value = JSON.stringify(data);
                }
                
                // Function to randomize items
                function randomizeItems(container) {
                    var list = container.querySelector('.sequence-list');
                    if (!list) return;
                    
                    var items = Array.from(list.querySelectorAll('.sequence-item'));
                    for (var i = items.length - 1; i > 0; i--) {
                        var j = Math.floor(Math.random() * (i + 1));
                        list.appendChild(items[j]);
                    }
                    
                    updateSequence(container);
                }
                
                // Add click events for up buttons
                var upButtons = document.querySelectorAll('.move-up');
                for (var i = 0; i < upButtons.length; i++) {
                    upButtons[i].addEventListener('click', function() {
                        var item = this.closest('.sequence-item');
                        var prev = item.previousElementSibling;
                        if (prev && prev.classList.contains('sequence-item')) {
                            item.parentNode.insertBefore(item, prev);
                            updateSequence(item.closest('.sequence-container'));
                        }
                    });
                }
                
                // Add click events for down buttons
                var downButtons = document.querySelectorAll('.move-down');
                for (var i = 0; i < downButtons.length; i++) {
                    downButtons[i].addEventListener('click', function() {
                        var item = this.closest('.sequence-item');
                        var next = item.nextElementSibling;
                        if (next && next.classList.contains('sequence-item')) {
                            var parent = item.parentNode;
                            parent.insertBefore(next, item);
                            updateSequence(item.closest('.sequence-container'));
                        }
                    });
                }
                
                // Add click events for reset buttons
                var resetButtons = document.querySelectorAll('.reset-sequence');
                for (var i = 0; i < resetButtons.length; i++) {
                    resetButtons[i].addEventListener('click', function() {
                        randomizeItems(this.closest('.sequence-container'));
                    });
                }
                
                // Hide any "not implemented" messages
                var warnMessages = document.querySelectorAll('.alert');
                for (var i = 0; i < warnMessages.length; i++) {
                    var msg = warnMessages[i];
                    if (msg.textContent && msg.textContent.includes('not yet implemented')) {
                        msg.style.display = 'none';
                    }
                }
                
                // Randomize on load
                var containers = document.querySelectorAll('.sequence-container');
                for (var i = 0; i < containers.length; i++) {
                    randomizeItems(containers[i]);
                }
            });
        </script>
        
        <!-- Basic CSS for sequence items -->
        <style>
            .sequence-container {
                margin-bottom: 20px;
            }
            .sequence-item {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 12px 15px;
                margin-bottom: 10px;
                position: relative;
            }
            .sequence-item .step-number {
                display: inline-block;
                width: 24px;
                height: 24px;
                line-height: 24px;
                text-align: center;
                border-radius: 50%;
                background-color: #6c757d;
                color: white;
                margin-right: 10px;
            }
            .sequence-item .step-label {
                font-weight: 500;
                vertical-align: middle;
            }
            .sequence-item .step-description {
                margin-top: 5px;
                margin-left: 34px;
                color: #555;
            }
            .sequence-buttons {
                position: absolute;
                top: 10px;
                right: 10px;
            }
            .sequence-buttons .btn {
                margin-left: 5px;
                width: 36px;
            }
        </style>
    </template>
</odoo>
